from lxml import etree, html
import os
import json

def sub(node, tag):
    return node.iter(tag) or []

def find_criteria(node, depth=0):
    payload = []
    for criteria in sub(node, "criteria"):
        criterion = criteria.find('criterion')
        criteria_dic = {}
        try:
            operator = criteria.attrib['operator']
            criterion_refs = criterion.attrib['test_ref'].split(':')
            payload.append({operator: criterion_refs})          
        except:
            pass
        if criterion is not None:
            payload.append({operator: find_criteria(criterion, depth+1)})
    return payload
            
def parseFromFile(filename = None):
    payload = []
    if filename is not None:
        if os.stat(filename).st_size > 0:
            file = open(filename,  encoding="utf8")
            contents = file.read().encode('utf-8')
            # utf8_parser = etree.XMLParser(encoding='utf-8')
            data = html.fromstring(contents)
            definitions = data.xpath("//definition")
            if len(definitions) > 0:
                try:
                    for definition in definitions:
                        title = definition.xpath("//metadata/title/text()")
                        fixes_cves = [fixes_cve for fixes_cve in definition.xpath("//metadata/advisory/cve/text()")]
                        severity = definition.xpath("//metadata/advisory/severity/text()")
                        cpes = [cpe for cpe in definition.xpath("//metadata/advisory/affected_cpe_list/cpe/text()")]
                        componenent = {
                            "title": title, 
                            "fixes_cves": fixes_cves, 
                            "saverity": severity, 
                            "cpes": cpes,
                            "criteria":  find_criteria(definition)
                        }
                        print(componenent)
                        payload.append(componenent)
                except Exception as e:
                    print(e)
    return {'advisory': payload}


if __name__ == "__main__":
    try:
        with open('result.json', 'w') as fp:
            json.dump(parseFromFile('vurn.xml'), fp)
    except Exception as e:
        print(e)
